<%@ page import="org.jivesoftware.openfire.ldap.LdapManager" %>
<%@ page import="org.jivesoftware.util.LocaleUtils" %>
<%@ page import="org.jivesoftware.util.ParamUtils" %>
<%@ page import="org.jivesoftware.util.CookieUtils" %>
<%@ page import="org.jivesoftware.util.StringUtils" %>
<%@ page import="javax.naming.ldap.LdapName" %>
<%@ page import="java.util.*" %>
<%@ page import="org.jivesoftware.util.cache.CacheFactory" %>

<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt" %>
<%
    // These variables will either hold the current value as configured
    // in the manager, or the values that are under test or being modified,
    // when the end-user is performing tests / changing settings
    String host;
    int port;
    LdapName baseDN;
    String adminDN;
    String adminPassword;
    boolean connectionPoolEnabled;
    boolean sslEnabled;
    boolean startTlsEnabled;
    boolean debugEnabled;
    boolean referralsEnabled;
    boolean aliasReferralsEnabled;

    Map<String,String> xmppSettings = (Map<String,String>)session.getAttribute("xmppSettings");
    Map<String, String> errors = new HashMap<>();

    Cookie csrfCookie = CookieUtils.getCookie( request, "csrf");
    String csrfParam = ParamUtils.getParameter(request, "csrf");

    // Get parameters
    boolean save = request.getParameter("save") != null;
    boolean test = request.getParameter("test") != null;

    if ( save || test ) {
        if (csrfCookie == null || csrfParam == null || !csrfCookie.getValue().equals(csrfParam)) {
            save = false;
            test = false;
            errors.put("csrf", "CSRF Failure!");
        }
    }
    csrfParam = StringUtils.randomString(15);
    CookieUtils.setCookie(request, response, "csrf", csrfParam, -1);
    pageContext.setAttribute("csrf", csrfParam);

    LdapManager manager = LdapManager.getInstance();

    if (save || test) {
        host = ParamUtils.getParameter(request, "host");
        if (host == null) {
            errors.put("host", LocaleUtils.getLocalizedString("setup.ldap.server.host_error"));
        }
        port = ParamUtils.getIntParameter(request, "port", manager.getPort());
        if (port <= 0) {
            errors.put("port", LocaleUtils.getLocalizedString("setup.ldap.server.port_error"));
        }
        try {
            baseDN = new LdapName( ParamUtils.getParameter(request, "basedn") );
        } catch ( Exception e ) {
            errors.put("baseDN", LocaleUtils.getLocalizedString("setup.ldap.server.basedn_error"));
            baseDN = null;
        }

        adminDN = ParamUtils.getParameter(request, "admindn");
        adminPassword = ParamUtils.getParameter(request, "adminpwd");
        connectionPoolEnabled = ParamUtils.getBooleanParameter(request, "connectionpool", manager.isConnectionPoolEnabled());
        sslEnabled = ParamUtils.getBooleanParameter(request, "ssl", manager.isSslEnabled());
        startTlsEnabled = ParamUtils.getBooleanParameter(request, "starttls", manager.isStartTlsEnabled());
        debugEnabled = ParamUtils.getBooleanParameter(request, "debug", manager.isDebugEnabled());
        referralsEnabled = ParamUtils.getBooleanParameter(request, "referrals", manager.isFollowReferralsEnabled());
        aliasReferralsEnabled = ParamUtils.getBooleanParameter(request, "aliasreferrals", manager.isFollowAliasReferralsEnabled());

        if (errors.isEmpty()) {
            // Store settings in a map and keep it in the session
            Map<String, String> settings = new HashMap<>();
            settings.put("ldap.serverType", serverType);
            settings.put("ldap.host", host);
            settings.put("ldap.port", Integer.toString(port));
            settings.put("ldap.baseDN", baseDN.toString());
            if (adminDN != null) {
                settings.put("ldap.adminDN", adminDN);
            }
            if (adminPassword != null) {
                settings.put("ldap.adminPassword", adminPassword);
            }
            // settings.put("ldap.connectionPoolEnabled", Boolean.toString(connectionPoolEnabled));
            // Always disable connection pooling so that connections aren't left hanging open.
            settings.put("ldap.connectionPoolEnabled", "false");
            settings.put("ldap.sslEnabled", Boolean.toString(sslEnabled));
            settings.put("ldap.startTlsEnabled", Boolean.toString(startTlsEnabled));
            settings.put("ldap.debugEnabled", Boolean.toString(debugEnabled));
            settings.put("ldap.autoFollowReferrals", Boolean.toString(referralsEnabled));
            settings.put("ldap.autoFollowAliasReferrals", Boolean.toString(aliasReferralsEnabled));

            session.setAttribute("ldapSettings", settings);

            if (save) {
                // Save settings and redirect
                Collection<String> hosts = new ArrayList<>();
                StringTokenizer st = new StringTokenizer(host, " ,\t\n\r\f");
                while (st.hasMoreTokens()) {
                    hosts.add(st.nextToken());
                }
                manager.setHosts(hosts);
                manager.setPort(port);
                manager.setBaseDN(baseDN);
                manager.setAdminDN(adminDN);
                if ( adminPassword != null ) { // Only store a password if it was changed.
                    manager.setAdminPassword( adminPassword );
                }
                manager.setConnectionPoolEnabled(connectionPoolEnabled);
                manager.setSslEnabled(sslEnabled);
                manager.setStartTlsEnabled(startTlsEnabled);
                manager.setDebugEnabled(debugEnabled);
                manager.setFollowReferralsEnabled(referralsEnabled);
                manager.setFollowAliasReferralsEnabled(aliasReferralsEnabled);

                // Save the settings for later, if we're in setup
                if (xmppSettings != null) {
                    xmppSettings.put("ldap.host", host);
                    xmppSettings.put("ldap.port", Integer.toString(port));
                    xmppSettings.put("ldap.baseDN", baseDN.toString());
                    xmppSettings.put("ldap.adminDN", adminDN);
                    if ( adminPassword != null ) { // Only store a password if it was changed.
                        xmppSettings.put( "ldap.adminPassword", adminPassword );
                    }
                    xmppSettings.put("ldap.connectionPoolEnabled", Boolean.toString(connectionPoolEnabled));
                    xmppSettings.put("ldap.sslEnabled", Boolean.toString(sslEnabled));
                    xmppSettings.put("ldap.startTlsEnabled", Boolean.toString(startTlsEnabled));
                    xmppSettings.put("ldap.debugEnabled", Boolean.toString(debugEnabled));
                    xmppSettings.put("ldap.autoFollowReferrals", Boolean.toString(referralsEnabled));
                    xmppSettings.put("ldap.autoFollowAliasReferrals", Boolean.toString(aliasReferralsEnabled));

                    session.setAttribute("xmppSettings", xmppSettings);

                    Set<String> encryptedXmppSettings = (Set<String>) session.getAttribute("encryptedSettings");
                    if (encryptedXmppSettings != null) {
                        encryptedXmppSettings.add("ldap.adminDN");
                        if ( adminPassword != null ) { // Only store a password if it was changed.
                            encryptedXmppSettings.add( "ldap.adminPassword" );
                        }
                    }
                    session.setAttribute("encryptedSettings", encryptedXmppSettings);
                }

                // Wipe caches, as modified settings might have made their content invalid.
                CacheFactory.clearCaches("Group", "Group Metadata Cache", "User", "VCard", "LDAP Authentication", "LDAP UserDN");

                // Redirect to next step.
                response.sendRedirect(nextPage);
                return;
            }
        }
    } else {
        // See if there are already values for the variables defined.
        StringBuilder sb = new StringBuilder();
        for (String aHost : LdapManager.getInstance().getHosts()) {
            sb.append(aHost).append(", ");
        }
        host = sb.toString();
        if (host.trim().length() > 0) {
            host = host.substring(0, host.length() - 2);
        }
        port = manager.getPort();
        baseDN = manager.getBaseDN();
        adminDN = manager.getAdminDN();
        connectionPoolEnabled = manager.isConnectionPoolEnabled();
        sslEnabled = manager.isSslEnabled();
        startTlsEnabled = manager.isStartTlsEnabled();
        debugEnabled = manager.isDebugEnabled();
        referralsEnabled = manager.isFollowReferralsEnabled();
        aliasReferralsEnabled = manager.isFollowAliasReferralsEnabled();
    }

    // These hold the values that are either under test, or are stored in the manager when not testing.
    pageContext.setAttribute("host", host);
    pageContext.setAttribute("port", port);
    pageContext.setAttribute("baseDN", baseDN);
    pageContext.setAttribute("adminDN", adminDN );
    // Only show password if it was set in this session (used for testing the password).
    if ( session.getAttribute("ldapSettings") != null ) {
        final Map<String, String> sessionSettings  = (( Map<String, String>) session.getAttribute( "ldapSettings" ));
        if (sessionSettings.get( "ldap.adminPassword" ) != null) {
            pageContext.setAttribute( "adminPassword", sessionSettings.get( "ldap.adminPassword" ) );
        }
    }
    pageContext.setAttribute("connectionPoolEnabled", connectionPoolEnabled );
    pageContext.setAttribute("sslEnabled", sslEnabled );
    pageContext.setAttribute("startTlsEnabled", startTlsEnabled );
    pageContext.setAttribute("debugEnabled", debugEnabled );
    pageContext.setAttribute("followReferralsEnabled", referralsEnabled );
    pageContext.setAttribute("followAliasReferralsEnabled", aliasReferralsEnabled );

    pageContext.setAttribute("test", test);
    pageContext.setAttribute("errors", errors);
%>
<html>
<head>
    <title><fmt:message key="setup.ldap.title" /></title>
    <c:forEach items="${meta}" var="entry">
        <meta name="${entry.key}" content="${entry.value}"/>
    </c:forEach>
</head>
<body>

    <c:if test="${empty errors and test}">
        <a href="${testPage}" id="lbmessage" title="<fmt:message key="global.test" />" style="display:none;"></a>
        <script type="text/javascript">
            function loadMsg() {
                var lb = new lightbox(document.getElementById('lbmessage'));
                lb.activate();
            }
            setTimeout('loadMsg()', 500);
        </script>
    </c:if>

    <c:if test="${initialSetup}">
        <h1><fmt:message key="setup.ldap.profile" />: <span><fmt:message key="setup.ldap.connection_settings" /></span></h1>
    </c:if>

    <!-- BEGIN jive-contentBox_stepbar -->
    <div id="jive-contentBox_stepbar">
        <span class="jive-stepbar_step"><strong>1. <fmt:message key="setup.ldap.connection_settings" /></strong></span>
        <span class="jive-stepbar_step"><em>2. <fmt:message key="setup.ldap.user_mapping" /></em></span>
        <span class="jive-stepbar_step"><em>3. <fmt:message key="setup.ldap.group_mapping" /></em></span>
    </div>
    <!-- END jive-contentBox-stepbar -->

    <!-- BEGIN jive-contentBox -->
    <div class="jive-contentBox jive-contentBox_for-stepbar">

    <h2><fmt:message key="setup.ldap.step_one" />: <span><fmt:message key="setup.ldap.connection_settings" /></span></h2>
    <p><fmt:message key="setup.ldap.server.description" /></p>

    <c:if test="${not empty errors}">
        <div class="error">
            <c:forEach var="err" items="${errors}">
                <c:out value="${err.value}"/><br/>
            </c:forEach>
        </div>
    </c:if>

    <form action="${currentPage}" method="post">
        <input type="hidden" name="csrf" value="${csrf}">

        <!-- BEGIN jive-contentBox_bluebox -->
        <div class="jive-contentBox_bluebox">
            <table border="0" cellpadding="0" cellspacing="2">
            <tr>
                <td colspan="4"><strong><fmt:message key="setup.ldap.server.ldap_server" /></strong></td>
            </tr>
            <c:if test="${initialSetup}">
            <tr>
                <td align="right" width="1%" nowrap="nowrap"><fmt:message key="setup.ldap.server.type" />:</td>
                <td colspan="3" nowrap>
                    <select name="serverType" size="1" id="jiveLDAPserverType" style="width:90%;">
                        <option value="" ${empty serverType ? "selected" : ""}><fmt:message key="setup.ldap.server.type_select" /></option>
                        <option value="activedirectory" ${'activedirectory' eq serverType ? "selected" : ""}>Active Directory</option>
                        <option value="openldap" ${'openldap' eq serverType ? "selected" : ""}>OpenLDAP</option>
                        <option value="other" ${'other' eq serverType ? "selected" : ""}><fmt:message key="setup.ldap.server.type_other" /></option>
                    </select><span class="jive-setup-helpicon" onmouseover="domTT_activate(this, event, 'content', '<fmt:message key="setup.ldap.server.type_help" />', 'styleClass', 'jiveTooltip', 'trail', true, 'delay', 300, 'lifetime', 8000);"></span>
                </td>
            </tr>
            </c:if>
            <tr>
                <td align="right" width="1%" nowrap="nowrap" style="vertical-align:bottom"><fmt:message key="setup.ldap.server.details" />:</td>
                <td colspan="3">
                    <table cellpadding="0" cellspacing="0" border="0">
                        <thead>
                        <tr>
                            <td nowrap="nowrap">
                                <fmt:message key="setup.ldap.server.protocol" />
                                <span class="jive-setup-helpicon" style="float:right" onmouseover="domTT_activate(this, event, 'content', '<fmt:message key="setup.ldap.server.protocol_help" />', 'styleClass', 'jiveTooltip', 'trail', true, 'delay', 300, 'lifetime', 8000);"></span>
                            </td>
                            <td nowrap="nowrap">
                                <fmt:message key="setup.ldap.server.host" />
                                <span class="jive-setup-helpicon" style="float:right" onmouseover="domTT_activate(this, event, 'content', '<fmt:message key="setup.ldap.server.host_help" />', 'styleClass', 'jiveTooltip', 'trail', true, 'delay', 300, 'lifetime', 8000);"></span>
                            </td>
                            <td nowrap="nowrap">
                                <fmt:message key="setup.ldap.server.port" />
                                <span class="jive-setup-helpicon" style="float:right" onmouseover="domTT_activate(this, event, 'content', '<fmt:message key="setup.ldap.server.port_help" />', 'styleClass', 'jiveTooltip', 'trail', true, 'delay', 300, 'lifetime', 8000);"></span>
                            </td>
                        </tr>
                        </thead>
                        <tbody>
                        <tr>
                            <td nowrap="nowrap">
                                <script type="text/javascript">
                                    function updateEncryptionSettings() {
                                        var selectProtocolField = document.getElementById("selectProtocol");
                                        var sslEnabled = selectProtocolField[selectProtocolField.selectedIndex].text == "ldaps";
                                        var portField = document.getElementById("jiveLDAPport");
                                        if (sslEnabled && portField.value == "389") {
                                           portField.value = "636";
                                        } else if (!sslEnabled && portField.value == "636") {
                                           portField.value = "389";
                                        }
                                        var startTlsField = document.getElementById("starttls");
                                        startTlsField.disabled = sslEnabled;
                                        var startTlsEnabled = !sslEnabled && startTlsField[startTlsField.selectedIndex].value == "true";
                                        if(!sslEnabled && !startTlsEnabled) {
                                            plainTextWarningDisplay = "";
                                        } else {
                                            plainTextWarningDisplay = "none";
                                        }
                                        document.getElementById("plainTextWarning").style.display = plainTextWarningDisplay;
                                    }
                                </script>
                                <select id="selectProtocol" name="ssl" onchange="updateEncryptionSettings();">
                                    <option value="true" <c:if test="${sslEnabled}">SELECTED</c:if>>ldaps</option>
                                    <option value="false" <c:if test="${!sslEnabled}">SELECTED</c:if>>ldap</option>
                                </select>
                                ://
                            </td>
                            <td nowrap="nowrap">
                                <input type="text" name="host" id="jiveLDAPphost" size="22" maxlength="150" value="<c:out value="${host}"/>">
                            </td>
                            <td nowrap="nowrap">
                                <span style="float:left">:</span>
                                <input type="text" name="port" id="jiveLDAPport" size="5" maxlength="5" value="${fn:escapeXml(port)}">
                            </td>
                        </tr>
                        </tbody>
                    </table>
                </td>
            </tr>
            <tr>
                <td align="right" width="1%" nowrap="nowrap">
                    <fmt:message key="setup.ldap.server.starttls" />:
                </td>
                <td colspan="3">
                    <select id="starttls" name="starttls" onchange="updateEncryptionSettings();">
                        <option value="true" <c:if test="${startTlsEnabled}">SELECTED</c:if>><fmt:message key="global.yes" /></option>
                        <option value="false" <c:if test="${!startTlsEnabled}">SELECTED</c:if>><fmt:message key="global.no" /></option>
                    </select>
                    <span class="jive-setup-helpicon" onmouseover="domTT_activate(this, event, 'content', '<fmt:message key="setup.ldap.server.starttls_help" />', 'styleClass', 'jiveTooltip', 'trail', true, 'delay', 300, 'lifetime', 8000);"></span>
                </td>
            </tr>
            <tr id="plainTextWarning">
                <td colspan="4" width="100%">
                    <script type="text/javascript">updateEncryptionSettings();</script>
                    <div class="warning"><fmt:message key="setup.ldap.plaintext" /></div>
                </td>
            </tr>
            <tr>
                <td align="right"><fmt:message key="setup.ldap.server.basedn" />:</td>
                <td colspan="3">
                    <input type="text" name="basedn" id="jiveLDAPbasedn" size="40" maxlength="300" value="${fn:escapeXml(baseDN)}" style="width:90%;">
                    <span class="jive-setup-helpicon" onmouseover="domTT_activate(this, event, 'content', '<fmt:message key="setup.ldap.server.basedn_help" />', 'styleClass', 'jiveTooltip', 'trail', true, 'delay', 300, 'lifetime', 16000);"></span>
                </td>
            </tr>
            <tr><td colspan="4">&nbsp;</td></tr>
            <tr>
                <td colspan="4"><strong><fmt:message key="setup.ldap.server.auth" />:</strong></td>
            </tr>
            <tr>
                <td align="right" width="1%" nowrap="nowrap"><fmt:message key="setup.ldap.server.admindn" />:</td>
                <td colspan="3">
                    <input type="text" name="admindn" id="jiveLDAPadmindn" size="40" maxlength="300" value="${fn:escapeXml(adminDN)}" style="width:90%;">
                    <span class="jive-setup-helpicon" onmouseover="domTT_activate(this, event, 'content', '<fmt:message key="setup.ldap.server.admindn_help" />', 'styleClass', 'jiveTooltip', 'trail', true, 'delay', 300, 'lifetime', -1);"></span>
                </td>
            </tr>
            <tr>
                <td align="right" width="1%" nowrap="nowrap"><fmt:message key="setup.ldap.server.password" />:</td>
                <td colspan="3"><input type="password" name="adminpwd" id="jiveLDAPadminpwd" size="22" maxlength="300" value="${not empty adminPassword ? fn:escapeXml(adminPassword) : ''}"> <span class="jive-setup-helpicon" onmouseover="domTT_activate(this, event, 'content', '<fmt:message key="setup.ldap.server.password_help" />', 'styleClass', 'jiveTooltip', 'trail', true, 'delay', 300, 'lifetime', 8000);"></span></td>
            </tr>
            </table>
        </div>
        <!-- END jive-contentBox_bluebox -->


        <!-- BEGIN jiveAdvancedButton -->
        <div class="jiveAdvancedButton">
            <a href="#" onclick="togglePanel(jiveAdvanced); return false;" id="jiveAdvancedLink"><fmt:message key="setup.ldap.advanced" /></a>
        </div>
        <!-- END jiveAdvancedButton -->

        <!-- BEGIN jiveAdvancedPanelcs (advanced connection settings) -->
        <div class="jiveadvancedPanelcs" id="jiveAdvanced" style="display: none;">
            <div>
                <table border="0" cellpadding="0" cellspacing="1">
                <thead>
                <tr>
                    <th width="10%"></th>
                    <th></th>
                    <th width="50"><fmt:message key="global.yes" /></th>
                    <th width="50"><fmt:message key="global.no" /></th>
                </tr>
                </thead>
                <tbody>
                <tr>
                    <td class="jive-advancedLabel" nowrap>
                        <fmt:message key="setup.ldap.server.connection_pool" />:
                    </td>
                    <td class="jive-advancedDesc jive-advancedBorderBottom jive-advancedBorderRight">
                        <fmt:message key="setup.ldap.server.connection_pool_help" />
                    </td>
                    <td class="jive-advancedBorderBottom jive-advancedBorderRight" align="center">
                        <input type="radio" name="connectionpool" value="true" ${connectionPoolEnabled ? "checked" : ""}>
                    </td>
                    <td class="jive-advancedBorderBottom" align="center">
                        <input type="radio" name="connectionpool" value="false" ${connectionPoolEnabled ? "" : "checked"}>
                    </td>
                </tr>
                <tr>
                    <td class="jive-advancedLabel" nowrap>
                        <fmt:message key="setup.ldap.server.debug" />:
                    </td>
                    <td class="jive-advancedDesc jive-advancedBorderBottom jive-advancedBorderRight">
                        <fmt:message key="setup.ldap.server.debug_help" />
                    </td>
                    <td class="jive-advancedBorderBottom jive-advancedBorderRight" align="center">
                        <input type="radio" name="debug" value="true" ${debugEnabled ? "checked" : ""}>
                    </td>
                    <td class="jive-advancedBorderBottom" align="center">
                        <input type="radio" name="debug" value="false" ${debugEnabled ? "" : "checked"}>
                    </td>
                </tr>
                <tr>
                    <td class="jive-advancedLabel" nowrap>
                        <fmt:message key="setup.ldap.server.referral" />:
                    </td>
                    <td class="jive-advancedDesc jive-advancedBorderBottom jive-advancedBorderRight">
                        <fmt:message key="setup.ldap.server.referral_help" />
                    </td>
                    <td class="jive-advancedBorderBottom jive-advancedBorderRight" align="center">
                        <input type="radio" name="referrals" value="true" ${followReferralsEnabled ? "checked" : ""}>
                    </td>
                    <td class="jive-advancedBorderBottom" align="center">
                        <input type="radio" name="referrals" value="false" ${followReferralsEnabled ? "" : "checked"}>
                    </td>
                </tr>
                <tr>
                    <td class="jive-advancedLabel" nowrap>
                        <fmt:message key="setup.ldap.server.alias_dereference" />:
                    </td>
                    <td class="jive-advancedDesc jive-advancedBorderBottom jive-advancedBorderRight">
                        <fmt:message key="setup.ldap.server.alias_dereference_help" />
                    </td>
                    <td class="jive-advancedBorderBottom jive-advancedBorderRight" align="center">
                        <input type="radio" name="aliasreferrals" value="true" ${followAliasReferralsEnabled ? "checked" : ""}>
                    </td>
                    <td class="jive-advancedBorderBottom" align="center">
                        <input type="radio" name="aliasreferrals" value="false" ${followAliasReferralsEnabled ? "" : "checked"}>
                    </td>
                </tr>
                </tbody>
                </table>
            </div>
        </div>
        <!-- END jiveAdvancedPanelcs (advanced connection settings) -->


        <!-- BEGIN jive-buttons -->
        <div class="jive-buttons">

            <!-- BEGIN right-aligned buttons -->
            <div align="right">

                <input type="Submit" name="test" value="<fmt:message key="setup.ldap.test" />" id="jive-setup-test">

                <input type="Submit" name="save" value="<fmt:message key="setup.ldap.continue" />" id="jive-setup-save">
            </div>
            <!-- END right-aligned buttons -->

        </div>
        <!-- END jive-buttons -->

    </form>

    </div>
    <!-- END jive-contentBox -->



</body>
</html>
